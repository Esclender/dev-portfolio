---
import { SUPPORTED_LOCALES, DEFAULT_LOCALE } from '@/utils/i18n';
import type { SupportedLocale } from '@/utils/i18n';

interface Props {
  currentLocale: SupportedLocale;
  currentPath: string;
}

const { currentLocale, currentPath } = Astro.props;

const localeNames = {
  es: 'Espa√±ol',
  en: 'English'
};
---

<div class="language-switcher">
  <div class="language-button" id="languageButton">
    <span class="text">{localeNames[currentLocale]}</span>
    <svg 
      class="chevron" 
      id="chevronIcon"
      xmlns="http://www.w3.org/2000/svg" 
      width="16" 
      height="16" 
      viewBox="0 0 24 24" 
      fill="none" 
      stroke="currentColor" 
      stroke-width="2" 
      stroke-linecap="round" 
      stroke-linejoin="round"
    >
      <polyline points="6 9 12 15 18 9"></polyline>
    </svg>
    <div class="loading-spinner" id="loadingSpinner">
      <svg class="animate-spin" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 12a9 9 0 11-6.219-8.56"></path>
      </svg>
    </div>
  </div>
  
  <div class="dropdown-menu" id="dropdownMenu">
    {SUPPORTED_LOCALES.map((locale) => (
      <button
        class="dropdown-item"
        data-locale={locale}
        data-current-path={currentPath}
        :class="{ 'active': locale === currentLocale }"
      >
        <span class="text">{localeNames[locale]}</span>
        {locale === currentLocale && (
          <svg class="check-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="20 6 9 17 4 12"></polyline>
          </svg>
        )}
      </button>
    ))}
  </div>
</div>

<style>
  .language-switcher {
    @apply relative;
  }

  .language-button {
    @apply flex items-center justify-between gap-2 bg-skin-fill text-skin-base border border-skin-muted rounded-md px-3 py-2 text-sm cursor-pointer hover:bg-skin-button-accent hover:text-skin-inverted transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-skin-hue focus:ring-opacity-50 min-w-[100px];
  }

  .text {
    @apply font-medium;
  }

  .chevron {
    @apply transition-transform duration-200 text-skin-muted flex-shrink-0;
  }

  .loading-spinner {
    @apply hidden text-skin-hue flex-shrink-0;
  }

  .loading .loading-spinner {
    @apply block;
  }

  .loading .chevron {
    @apply hidden;
  }

  .dropdown-menu {
    @apply absolute top-full left-0 mt-1 bg-skin-fill border border-skin-muted rounded-md shadow-lg py-1 min-w-[100px] z-50 opacity-0 pointer-events-none transform scale-95 transition-all duration-200;
  }

  .dropdown-menu.open {
    @apply opacity-100 pointer-events-auto transform scale-100;
  }

  .dropdown-item {
    @apply flex items-center justify-between gap-2 w-full px-3 py-2 text-sm text-skin-base hover:bg-skin-button-accent hover:text-skin-inverted transition-colors duration-150 cursor-pointer;
  }

  .dropdown-item.active {
    @apply bg-skin-button-accent text-skin-inverted;
  }

  .dropdown-item.loading {
    @apply opacity-50 cursor-not-allowed;
  }

  .check-icon {
    @apply text-skin-hue flex-shrink-0;
  }

  /* Page transition overlay */
  .page-transition {
    @apply fixed inset-0 bg-skin-fill/80 backdrop-blur-sm z-[9999] opacity-0 pointer-events-none transition-opacity duration-300;
  }

  .page-transition.active {
    @apply opacity-100 pointer-events-auto;
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .language-button {
      @apply px-2 py-1.5 text-xs min-w-[80px];
    }
    
    .dropdown-menu {
      @apply min-w-[80px];
    }
    
    .dropdown-item {
      @apply px-2 py-1.5 text-xs;
    }
  }
</style>

<script>
  class LanguageSwitcher {
    constructor() {
      this.button = document.getElementById('languageButton');
      this.dropdown = document.getElementById('dropdownMenu');
      this.chevron = document.getElementById('chevronIcon');
      this.loadingSpinner = document.getElementById('loadingSpinner');
      this.isOpen = false;
      this.isNavigating = false;
      
      this.init();
    }

    init() {
      // Toggle dropdown on button click
      this.button.addEventListener('click', () => this.toggleDropdown());
      
      // Handle language selection
      this.dropdown.addEventListener('click', (e) => {
        const item = e.target.closest('.dropdown-item');
        if (item && !this.isNavigating) {
          this.selectLanguage(item.dataset.locale);
        }
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!this.button.contains(e.target) && !this.dropdown.contains(e.target)) {
          this.closeDropdown();
        }
      });
      
      // Close dropdown on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.closeDropdown();
        }
      });
    }

    toggleDropdown() {
      if (this.isOpen) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }

    openDropdown() {
      this.dropdown.classList.add('open');
      this.chevron.style.transform = 'rotate(180deg)';
      this.isOpen = true;
    }

    closeDropdown() {
      this.dropdown.classList.remove('open');
      this.chevron.style.transform = 'rotate(0deg)';
      this.isOpen = false;
    }

    async selectLanguage(locale) {
      if (this.isNavigating) return;
      
      this.isNavigating = true;
      this.closeDropdown();
      
      // Show loading state
      this.button.classList.add('loading');
      
      // Create and show transition overlay
      const overlay = this.createTransitionOverlay();
      document.body.appendChild(overlay);
      
      // Trigger transition animation
      requestAnimationFrame(() => {
        overlay.classList.add('active');
      });
      
      const currentPath = this.dropdown.querySelector('.dropdown-item').dataset.currentPath;
      const pathSegments = currentPath.split('/').filter(Boolean);
      const firstSegment = pathSegments[0];
      
      let newPath;
      if (['es', 'en'].includes(firstSegment)) {
        newPath = `/${locale}/${pathSegments.slice(1).join('/')}`;
      } else {
        newPath = `/${locale}${currentPath}`;
      }
      
      try {
        // Prefetch the new page content
        await this.prefetchPage(newPath);
        
        // Small delay for smooth transition
        await new Promise(resolve => setTimeout(resolve, 300));
        
        // Navigate to the new page
        window.location.href = newPath;
      } catch (error) {
        console.error('Navigation error:', error);
        // Fallback to direct navigation
        window.location.href = newPath;
      }
    }

    createTransitionOverlay() {
      const overlay = document.createElement('div');
      overlay.className = 'page-transition';
      overlay.innerHTML = `
        <div class="flex items-center justify-center h-full">
          <div class="flex items-center gap-3 text-skin-base">
            <svg class="animate-spin" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M21 12a9 9 0 11-6.219-8.56"></path>
            </svg>
            <span class="text-lg font-medium">Changing language...</span>
          </div>
        </div>
      `;
      return overlay;
    }

    async prefetchPage(url) {
      try {
        const response = await fetch(url, {
          method: 'HEAD',
          cache: 'force-cache'
        });
        return response.ok;
      } catch (error) {
        console.warn('Prefetch failed:', error);
        return false;
      }
    }
  }

  // Initialize the language switcher when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new LanguageSwitcher();
  });
</script> 