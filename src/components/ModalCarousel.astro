---
interface ImageItem {
  src: string;
  alt?: string;
  description?: string;
}

interface Props {
  images: Array<ImageItem | string>;
  initialIndex?: number;
  className?: string;
}

const {
  images = [],
  initialIndex = 0,
  className = "",
}: Props = Astro.props as Props;

const normalizedImages = images.map((item) =>
  typeof item === "string" ? { src: item, alt: `${Astro.locals.translation.ui.carousel.image}`, description: "" } : item
);

console.log('ModalCarousel received images:', images);
console.log('ModalCarousel normalized images:', normalizedImages);
---

{normalizedImages.length > 0 && (
  <div class={`modal-carousel ${className}`} data-modal-carousel>
    <div class="modal-overlay" data-modal-overlay>
      <div class="modal-content">
        <!-- Close button -->
        <button 
          class="modal-close" 
          data-modal-close
          aria-label={Astro.locals.translation.ui.carousel.closeModal}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M18 6 6 18"/>
            <path d="m6 6 12 12"/>
          </svg>
        </button>

        <!-- Image carousel -->
        <div class="carousel-container">
          <ul class="carousel-list" data-carousel-list>
            {normalizedImages.map((img, idx) => (
              <li 
                class="carousel-item" 
                data-carousel-item
                data-index={idx}
              >
                <div class="image-container">
                  <img
                    src={img.src}
                    alt={img.alt}
                    loading="lazy"
                    class="carousel-image"
                    width="800"
                    height="600"
                  />
                  {img.description ? (
                    <div class="image-description">
                      <h3 class="description-title">{img.alt}</h3>
                      <p class="description-text">{img.description}</p>
                    </div>
                  ) : (
                    <div class="image-description">
                      <h3 class="description-title">{img.alt || `${Astro.locals.translation.ui.carousel.image} ${idx + 1}`}</h3>
                      <p class="description-text">{Astro.locals.translation.ui.carousel.noDescription}</p>
                    </div>
                  )}
                </div>
              </li>
            ))}
          </ul>

          <!-- Navigation arrows -->
          <button 
            class="nav-arrow nav-prev" 
            data-nav-prev
            aria-label={Astro.locals.translation.ui.carousel.previousImage}
          >
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="m15 18-6-6 6-6"/>
            </svg>
          </button>
          <button 
            class="nav-arrow nav-next" 
            data-nav-next
            aria-label={Astro.locals.translation.ui.carousel.nextImage}
          >
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="m9 18 6-6-6-6"/>
            </svg>
          </button>

          <!-- Dots indicator -->
          <div class="dots-container" data-dots>
            {normalizedImages.map((_, idx) => (
              <button 
                class="dot" 
                data-dot
                data-index={idx}
                aria-label={`${Astro.locals.translation.ui.carousel.goToImage} ${idx + 1}`}
              ></button>
            ))}
          </div>

          <!-- Image counter -->
          <div class="image-counter">
            <span data-current-index>1</span> / <span data-total-count>{normalizedImages.length}</span>
          </div>
        </div>
      </div>
    </div>
  </div>
)}

<style>
  .modal-carousel {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 1000;
  }

  .modal-carousel.active {
    display: block;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(8px);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }

  .modal-content {
    position: relative;
    width: 100%;
    max-width: 90vw;
    max-height: 90vh;
    background: rgb(var(--color-fill));
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 10;
    background: rgba(0, 0, 0, 0.7);
    border: none;
    border-radius: 50%;
    width: 3rem;
    height: 3rem;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .modal-close:hover {
    background: rgba(0, 0, 0, 0.9);
    transform: scale(1.1);
  }

  .carousel-container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .carousel-list {
    display: flex;
    width: 100%;
    height: 100%;
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .carousel-item {
    flex-shrink: 0;
    width: 100%;
    height: 100%;
    position: relative;
  }

  .image-container {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .carousel-image {
    width: 100%;
    height: 60%;
    object-fit: cover;
    object-position: center;
    transition: transform 0.3s ease;
  }

  .carousel-image:hover {
    transform: scale(1.02);
  }

  .image-description {
    flex: 1;
    min-height: 40%;
    padding: 2rem;
    background: rgb(var(--color-button-muted));
    display: flex;
    flex-direction: column;
    justify-content: center;
    border-top: 1px solid rgba(var(--color-text-muted), 0.2);
    overflow-y: auto;
  }

  .description-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: rgb(var(--color-text-base));
    line-height: 1.3;
  }

  .description-text {
    font-size: 1.125rem;
    line-height: 1.7;
    color: rgb(var(--color-text-muted));
    max-width: 100%;
  }

  .nav-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: #000000;
    border: 3px solid #ffffff;
    border-radius: 50%;
    width: 4rem;
    height: 4rem;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    z-index: 15;
    backdrop-filter: blur(4px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);
  }

  .nav-arrow:hover {
    background: #000000;
    border-color: #ffffff;
    transform: translateY(-50%) scale(1.15);
    box-shadow: 0 6px 25px rgba(0, 0, 0, 0.8);
  }

  .nav-arrow:active {
    transform: translateY(-50%) scale(0.95);
  }

  .nav-arrow svg {
    width: 28px;
    height: 28px;
    stroke-width: 3;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.5));
  }

  .nav-prev {
    left: 2rem;
  }

  .nav-next {
    right: 2rem;
  }

  .dots-container {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 1rem;
    z-index: 15;
  }

  .dot {
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    border: 2px solid rgba(255, 255, 255, 0.6);
    background: rgba(255, 255, 255, 0.3);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .dot:hover {
    background: rgba(255, 255, 255, 0.6);
    border-color: rgba(255, 255, 255, 0.9);
    transform: scale(1.3);
  }

  .dot.active {
    background: white;
    border-color: white;
    transform: scale(1.4);
    box-shadow: 0 0 15px rgba(255, 255, 255, 0.7);
  }

  .image-counter {
    position: absolute;
    top: 2rem;
    left: 2rem;
    background: rgba(0, 0, 0, 0.9);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 2rem;
    font-size: 1rem;
    font-weight: 700;
    z-index: 15;
    backdrop-filter: blur(4px);
    border: 2px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);
  }

  @media (max-width: 768px) {
    .modal-overlay {
      padding: 1rem;
    }
    
    .modal-content {
      max-width: 95vw;
      max-height: 95vh;
    }
    
    .nav-arrow {
      width: 3rem;
      height: 3rem;
    }
    
    .nav-prev {
      left: 1rem;
    }
    
    .nav-next {
      right: 1rem;
    }
    
    .image-description {
      padding: 1.5rem;
    }
    
    .description-title {
      font-size: 1.25rem;
      margin-bottom: 0.75rem;
    }
    
    .description-text {
      font-size: 1rem;
      line-height: 1.6;
    }
    
    .image-counter {
      top: 1rem;
      left: 1rem;
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
    }
    
    .dots-container {
      bottom: 1rem;
      gap: 0.5rem;
    }
    
    .dot {
      width: 0.75rem;
      height: 0.75rem;
    }
  }

  @media (max-width: 480px) {
    .nav-arrow {
      width: 2.5rem;
      height: 2.5rem;
    }
    
    .nav-prev {
      left: 0.75rem;
    }
    
    .nav-next {
      right: 0.75rem;
    }
    
    .image-description {
      padding: 1rem;
    }
    
    .description-title {
      font-size: 1.125rem;
    }
    
    .description-text {
      font-size: 0.875rem;
    }
  }

  @media (min-width: 1024px) {
    .modal-content {
      max-width: 80vw;
      height: 80vh;
    }

    .image-container {
      flex-direction: row;
    }

    .carousel-image {
      width: 70%;
      height: 100%;
      object-fit: contain;
    }

    .image-description {
      width: 30%;
      min-height: auto;
      border-top: none;
      border-left: 1px solid rgba(var(--color-text-muted), 0.2);
      padding: 2.5rem;
      justify-content: start;
      overflow-y: auto;
    }

    .nav-next {
      right: calc(30% + 2rem);
    }
  }
</style>

<script>
  class ModalCarousel {
    private modal: HTMLElement;
    private overlay: HTMLElement | null;
    private closeBtn: HTMLElement | null;
    private carouselList: HTMLElement | null;
    private items: NodeListOf<HTMLElement>;
    private dots: NodeListOf<HTMLElement>;
    private prevBtn: HTMLElement | null;
    private nextBtn: HTMLElement | null;
    private currentIndexEl: HTMLElement | null;
    private totalCountEl: HTMLElement | null;
    private currentIndex: number;
    private totalItems: number;

    constructor(modalElement: HTMLElement) {
      this.modal = modalElement;
      this.overlay = modalElement.querySelector('[data-modal-overlay]');
      this.closeBtn = modalElement.querySelector('[data-modal-close]');
      this.carouselList = modalElement.querySelector('[data-carousel-list]');
      this.items = modalElement.querySelectorAll('[data-carousel-item]');
      this.dots = modalElement.querySelectorAll('[data-dot]');
      this.prevBtn = modalElement.querySelector('[data-nav-prev]');
      this.nextBtn = modalElement.querySelector('[data-nav-next]');
      this.currentIndexEl = modalElement.querySelector('[data-current-index]');
      this.totalCountEl = modalElement.querySelector('[data-total-count]');
      
      this.currentIndex = 0;
      this.totalItems = this.items.length;
      
      this.init();
    }
    
    init(): void {
      console.log('ModalCarousel initializing with:', {
        totalItems: this.totalItems,
        hasOverlay: !!this.overlay,
        hasCloseBtn: !!this.closeBtn,
        hasCarouselList: !!this.carouselList,
        hasItems: this.items.length,
        hasDots: this.dots.length,
        hasPrevBtn: !!this.prevBtn,
        hasNextBtn: !!this.nextBtn,
        hasCurrentIndexEl: !!this.currentIndexEl,
        hasTotalCountEl: !!this.totalCountEl
      });
      
      this.bindEvents();
      this.updateCounter();
      this.updateDots();
      this.updateTotalCount();
    }
    
    bindEvents(): void {
      if (this.closeBtn) {
        this.closeBtn.addEventListener('click', () => this.close());
      }
      if (this.overlay) {
        this.overlay.addEventListener('click', (e: Event) => {
          if (e.target === this.overlay) this.close();
        });
      }
      
      if (this.prevBtn) {
        this.prevBtn.addEventListener('click', () => this.prev());
      }
      if (this.nextBtn) {
        this.nextBtn.addEventListener('click', () => this.next());
      }
      
      this.dots.forEach((dot: HTMLElement, index: number) => {
        dot.addEventListener('click', () => this.goTo(index));
      });
      
      // Keyboard navigation
      document.addEventListener('keydown', (e: KeyboardEvent) => {
        if (!this.modal.classList.contains('active')) return;
        
        switch(e.key) {
          case 'Escape':
            this.close();
            break;
          case 'ArrowLeft':
            this.prev();
            break;
          case 'ArrowRight':
            this.next();
            break;
        }
      });
    }
    
    open(initialIndex: number = 0): void {
      console.log('ModalCarousel opening with index:', initialIndex);
      this.currentIndex = Math.max(0, Math.min(initialIndex, this.totalItems - 1));
      this.modal.classList.add('active');
      document.body.style.overflow = 'hidden';
      this.goTo(this.currentIndex);
      console.log('ModalCarousel opened successfully, current index:', this.currentIndex);
    }
    
    close(): void {
      this.modal.classList.remove('active');
      document.body.style.overflow = '';
    }
    
    goTo(index: number): void {
      this.currentIndex = Math.max(0, Math.min(index, this.totalItems - 1));
      const translateX = -this.currentIndex * 100;
      if (this.carouselList) {
        this.carouselList.style.transform = `translateX(${translateX}%)`;
      }
      this.updateCounter();
      this.updateDots();
    }
    
    prev(): void {
      const newIndex = this.currentIndex > 0 ? this.currentIndex - 1 : this.totalItems - 1;
      this.goTo(newIndex);
    }
    
    next(): void {
      const newIndex = this.currentIndex < this.totalItems - 1 ? this.currentIndex + 1 : 0;
      this.goTo(newIndex);
    }
    
    updateCounter(): void {
      if (this.currentIndexEl) {
        this.currentIndexEl.textContent = (this.currentIndex + 1).toString();
      }
    }
    
    updateDots(): void {
      this.dots.forEach((dot: HTMLElement, index: number) => {
        dot.classList.toggle('active', index === this.currentIndex);
      });
    }
    
    updateTotalCount(): void {
      if (this.totalCountEl) {
        this.totalCountEl.textContent = this.totalItems.toString();
      }
    }
  }
  
  // Initialize all modal carousels
  document.addEventListener('DOMContentLoaded', () => {
    const modals = document.querySelectorAll('[data-modal-carousel]');
    console.log('Found modal carousels:', modals.length);
    
    modals.forEach((modal, index) => {
      console.log(`Initializing modal ${index}:`, modal);
      const carousel = new ModalCarousel(modal as HTMLElement);
      // Store carousel instance on the modal element
      (modal as any)._carousel = carousel;
      console.log(`Modal ${index} carousel instance:`, carousel);
    });
  });
</script> 