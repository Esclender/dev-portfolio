---
interface ImageItem {
  src: string;
  alt?: string;
}

interface Props {
  images: Array<ImageItem | string>;
  aspect?: string; // e.g., "16/9", "4/3"
  className?: string;
  dataProjectIndex?: number;
  dataProjectName?: string;
}

const {
  images = [],
  aspect = "16/9",
  className = "",
}: Props = Astro.props as Props;

const normalizedImages = images.map((item) =>
  typeof item === "string" ? { src: item } : item
);
---

{normalizedImages.length > 0 && (
  <div class={`group relative ${className}`} data-carousel-root>
    <div class="relative overflow-hidden rounded-md ring-1 ring-skin-muted/60 bg-skin-button-muted/30">
      <ul
        class="flex gap-2 overflow-x-auto snap-x snap-mandatory scroll-smooth no-scrollbar"
        aria-label={Astro.locals.translation.ui.carousel.imageCarousel}
        role="region"
        data-carousel
      >
        {normalizedImages.map((img, idx) => (
          <li
            class="snap-center shrink-0 w-full"
            style={`aspect-ratio:${aspect};`}
          >
            <img
              src={img.src}
              alt={img.alt ?? `${Astro.locals.translation.ui.carousel.slide} ${idx + 1}`}
              loading="lazy"
              class="h-full w-full object-cover cursor-pointer hover:scale-105 transition-transform duration-200"
              width="1600"
              height="900"
              data-image-index={idx}
              data-project-index={Astro.props.dataProjectIndex}
              data-project-name={Astro.props.dataProjectName}
            />
          </li>
        ))}
      </ul>
    </div>

    <div
      class="pointer-events-none absolute inset-0 flex items-center justify-center bg-black/20 backdrop-blur-[2px] transition md:opacity-0 group-hover:opacity-100"
    >
      <div
        class="flex items-center gap-2 rounded-full bg-skin-fill/60 px-4 py-2 text-sm text-skin-base ring-1 ring-skin-muted backdrop-blur-sm"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="18"
          height="18"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="lucide lucide-expand"
          ><path d="m21 21-6-6m6 6v-4.8m0 4.8h-4.8"></path><path d="M3 16.2V21h4.8"
          ></path><path d="M3 3h6l-7 7"></path>
        </svg>
        {Astro.locals.translation.ui.carousel.clickToExpand}
      </div>
    </div>
  </div>
)}

<style>
  .no-scrollbar::-webkit-scrollbar { display: none; }
  .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
</style>

<script>
  // Main ImageCarousel is now just for display - no navigation needed
  // All carousel functionality is in the ModalCarousel component

  // Handle image clicks to open modal
  document.addEventListener('DOMContentLoaded', function() {
    const images = document.querySelectorAll('[data-image-index]');
    console.log('Found images with data-image-index:', images.length);
    
    images.forEach(function(img, idx) {
      img.addEventListener('click', function(this: HTMLElement) {
        const projectIndex = this.getAttribute('data-project-index');
        const imageIndex = this.getAttribute('data-image-index');
        
        console.log('Image clicked:', { projectIndex, imageIndex, element: this });
        
        if (projectIndex !== null && imageIndex !== null) {
          const modalSelector = `.project-modal-${projectIndex}`;
          const modal = document.querySelector(modalSelector);
          
          console.log('Looking for modal:', modalSelector, 'Found:', modal);
          
          if (modal) {
            // Access the carousel instance stored on the modal element
            const carousel = (modal as any)._carousel;
            console.log('Carousel instance:', carousel);
            
            if (carousel && typeof carousel.open === 'function') {
              console.log('Opening modal at index:', imageIndex);
              carousel.open(parseInt(imageIndex));
            } else {
              console.error('Carousel instance not found or open method not available');
            }
          } else {
            console.error('Modal not found:', modalSelector);
          }
        }
      });
    });
  });
</script>
